name: "Terraform"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35.7.8

      - name: Get directories
        id: directories
        run: |
          # Get the list of files that were changed in the latest commit
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "CHANGED_FILES"
          echo "$CHANGED_FILES"

          # Filter the list to include only the directories that contain the main.tf file
          DIRS=$(echo $CHANGED_FILES | tr -s ' ' '\n' | grep -E '^.+/main\.tf$' | xargs -I {} dirname {} | sort | uniq)
          echo "DIRS"
          echo "$DIRS"
          echo "::set-output name=dirs::$(echo $DIRS)"
          
          CURRENT_DIR=$( pwd )
          echo "Current dir: $CURRENT_DIR"
          echo "::set-output name=current::$(echo $CURRENT_DIR)"


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          # terraform_version: 1.4.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          fetch-depth: 0
      
      - name: Set up Azure CLI
        uses: Azure/cli@v1
        with:
          inlineScript: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}


      - name: Terraform Format
        id: fmt
        run: |
          for DIR in ${{ steps.directories.outputs.dirs }}; do
            echo "Dir to format: $DIR"
            cd "${{ steps.directories.outputs.current }}"
            cd "$DIR"
            terraform fmt -check
          done
        

      - name: Terraform Init
        id: init
        run: |
          for DIR in ${{ steps.directories.outputs.dirs }}; do
            echo "Dir to init: $DIR"
            cd "${{ steps.directories.outputs.current }}"
            cd "$DIR"
            terraform init 
          done
          
      
      - name: Terraform Validate
        id: validate
        run: |
          for DIR in ${{ steps.directories.outputs.dirs }}; do
            echo "Dir to validate: $DIR"
            cd "${{ steps.directories.outputs.current }}"
            cd "$DIR"
            terraform validate -no-color
          done
        

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        #run: terraform plan -no-color -input=false
        run: |
          echo "directories: ${{ steps.directories.outputs.dirs }}""
          echo "current dir: ${{ steps.directories.outputs.current }}""

          # Run Terraform plan in each directory that contains the main.tf file
          

          for DIR in ${{ steps.directories.outputs.dirs }}; do
            echo "Dir to plan: $DIR"
            cd "${{ steps.directories.outputs.current }}"
            cd "$DIR"
            terraform plan -no-color -input=false 
          done
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          for DIR in ${{ steps.directories.outputs.dirs }}; do
            echo "Dir to apply: $DIR"
            cd "${{ steps.directories.outputs.current }}"
            cd "$DIR"
            terraform apply -auto-approve -input=false
          done
        
        
